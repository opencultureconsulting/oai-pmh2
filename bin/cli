#!/usr/bin/env php
<?php

/**
 * OAI-PMH 2.0 Data Provider
 * Copyright (C) 2024 Sebastian Meyer <sebastian.meyer@opencultureconsulting.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

declare(strict_types=1);

namespace OCC\OaiPmh2;

use Composer\InstalledVersions;
use Doctrine\Migrations\Configuration\Configuration as DoctrineMigrationsConfiguration;
use Doctrine\Migrations\Configuration\EntityManager\ExistingEntityManager;
use Doctrine\Migrations\Configuration\Migration\ExistingConfiguration;
use Doctrine\Migrations\DependencyFactory;
use Doctrine\Migrations\Metadata\Storage\TableMetadataStorageConfiguration;
use Doctrine\Migrations\Tools\Console\Command as DoctrineMigrationsCommand;
use Doctrine\ORM\Tools\Console\Command as DoctrineORMCommand;
use Doctrine\ORM\Tools\Console\EntityManagerProvider\SingleManagerProvider;
use OCC\OaiPmh2\Configuration;
use OCC\OaiPmh2\Console as Command;
use Symfony\Component\Console\Application;

require __DIR__ . '/../vendor/autoload.php';

/**
 * Provides the Command Line Interface.
 *
 * @author Sebastian Meyer <sebastian.meyer@opencultureconsulting.com>
 * @package OAIPMH2
 */
final class Cli extends Application
{
    /**
     * Register commands for Doctrine DBAL.
     *
     * @return void
     */
    protected function addDoctrineCommands(): void
    {
        $entityManagerProvider = new SingleManagerProvider(EntityManager::getInstance());

        $storage = new TableMetadataStorageConfiguration();
        $storage->setTableName('migrations');

        $configuration = new DoctrineMigrationsConfiguration();
        $configuration->addMigrationsDirectory(
            __NAMESPACE__ . '\\Migration',
            __DIR__ . '/../data/migrations'
        );
        $configuration->setCheckDatabasePlatform(true);
        $configuration->setCustomTemplate(__DIR__ . '/../src/Migration.template');
        $configuration->setMetadataStorageConfiguration($storage);
        $configuration->setMigrationOrganization(DoctrineMigrationsConfiguration::VERSIONS_ORGANIZATION_NONE);
        $configuration->setTransactional(true);

        $dependencyFactory = DependencyFactory::fromEntityManager(
            new ExistingConfiguration($configuration),
            new ExistingEntityManager($entityManagerProvider->getDefaultManager())
        );

        $this->addCommands([
            // Doctrine migrations commands
            new DoctrineMigrationsCommand\DiffCommand($dependencyFactory, 'orm:schema:diff'),
            new DoctrineMigrationsCommand\MigrateCommand($dependencyFactory, 'orm:schema:migrate'),
            // Doctrine ORM commands
            new DoctrineORMCommand\ClearCache\MetadataCommand($entityManagerProvider),
            new DoctrineORMCommand\ClearCache\QueryCommand($entityManagerProvider),
            new DoctrineORMCommand\ClearCache\ResultCommand($entityManagerProvider),
            new DoctrineORMCommand\GenerateProxiesCommand($entityManagerProvider)
        ]);
    }

    /**
     * Register commands for OAI-PMH2 tasks.
     *
     * @return void
     */
    protected function addOaiCommands(): void
    {
        $this->addCommands([
            new Command\AddRecordCommand(),
            new Command\AddSetCommand(),
            new Command\CsvImportCommand(),
            new Command\DeleteRecordCommand(),
            new Command\DeleteSetCommand(),
            new Command\PruneDeletedRecordsCommand(),
            new Command\PruneOrphanedSetsCommand(),
            new Command\PruneResumptionTokensCommand(),
            new Command\UpdateFormatsCommand(),
            new Command\UpgradeAppCommand()
        ]);
    }

    /**
     * Create new Command Line Interface instance.
     */
    public function __construct()
    {
        parent::__construct(
            Configuration::getInstance()->repositoryName,
            InstalledVersions::getVersion('opencultureconsulting/oai-pmh2') ?? 'unknown'
        );
        $this->setCatchExceptions(true);
        $this->addDoctrineCommands();
        $this->addOaiCommands();
    }
}

$cli = new Cli();
$cli->run();
