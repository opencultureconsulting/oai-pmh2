#!/usr/bin/env php
<?php

/**
 * OAI-PMH 2.0 Data Provider
 * Copyright (C) 2024 Sebastian Meyer <sebastian.meyer@opencultureconsulting.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

declare(strict_types=1);

namespace OCC\OaiPmh2;

use Composer\InstalledVersions;
use Doctrine\ORM\Tools\Console\Command as DoctrineCommand;
use Doctrine\ORM\Tools\Console\EntityManagerProvider\SingleManagerProvider;
use OCC\OaiPmh2\Console as Command;
use Symfony\Component\Console\Application;

require __DIR__ . '/../vendor/autoload.php';

$entityManagerProvider = new SingleManagerProvider(EntityManager::getInstance());

$cli = new Application(
    'OAI-PMH2 Data Provider Command Line Interface',
    InstalledVersions::getVersion('opencultureconsulting/oai-pmh2') ?? 'unknown'
);
$cli->addCommands([
    // Doctrine Commands
    new DoctrineCommand\ClearCache\MetadataCommand($entityManagerProvider),
    new DoctrineCommand\ClearCache\QueryCommand($entityManagerProvider),
    new DoctrineCommand\ClearCache\ResultCommand($entityManagerProvider),
    new DoctrineCommand\SchemaTool\CreateCommand($entityManagerProvider),
    new DoctrineCommand\SchemaTool\UpdateCommand($entityManagerProvider),
    new DoctrineCommand\GenerateProxiesCommand($entityManagerProvider),
    new DoctrineCommand\ValidateSchemaCommand($entityManagerProvider),
    // OAI-PMH2 Commands
    new Command\AddRecordCommand(),
    new Command\AddSetCommand(),
    new Command\CsvImportCommand(),
    new Command\DeleteRecordCommand(),
    new Command\PruneDeletedRecordsCommand(),
    new Command\PruneResumptionTokensCommand(),
    new Command\UpdateFormatsCommand()
]);
$cli->setCatchExceptions(true);
$cli->run();
